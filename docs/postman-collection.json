{
  "info": {
    "name": "Comments API",
    "description": "A comprehensive API for managing comments with CRUD operations, nested replies, likes/dislikes, and soft deletion.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://172.30.230.15:3000",
      "type": "string"
    },
    {
      "key": "apiBase",
      "value": "{{baseUrl}}/api/comments",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Check if the server is running and healthy"
      },
      "response": []
    },
    {
      "name": "API Info",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        },
        "description": "Get API information and available endpoints"
      },
      "response": []
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Get All Comments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiBase}}",
              "host": ["{{apiBase}}"],
              "path": [""]
            },
            "description": "Retrieve all comments (excluding deleted ones by default)"
          },
          "response": []
        },
        {
          "name": "Get Comments with Parent ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiBase}}?parentId=comment_123",
              "host": ["{{apiBase}}"],
              "path": [""],
              "query": [
                {
                  "key": "parentId",
                  "value": "comment_123",
                  "description": "Get only replies to this specific comment"
                }
              ]
            },
            "description": "Get replies to a specific comment"
          },
          "response": []
        },
        {
          "name": "Get Comments Including Deleted",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiBase}}?includeDeleted=true",
              "host": ["{{apiBase}}"],
              "path": [""],
              "query": [
                {
                  "key": "includeDeleted",
                  "value": "true",
                  "description": "Include soft-deleted comments in the response"
                }
              ]
            },
            "description": "Get all comments including those that have been soft-deleted"
          },
          "response": []
        },
        {
          "name": "Create New Comment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"This is a new comment\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}",
              "host": ["{{apiBase}}"],
              "path": [""]
            },
            "description": "Create a new top-level comment"
          },
          "response": []
        },
        {
          "name": "Create Reply Comment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"This is a reply to the parent comment\",\n  \"parentId\": \"comment_123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}",
              "host": ["{{apiBase}}"],
              "path": [""]
            },
            "description": "Create a reply to an existing comment"
          },
          "response": []
        },
        {
          "name": "Create Comment with Persian Text",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"این یک کامنت فارسی است\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}",
              "host": ["{{apiBase}}"],
              "path": [""]
            },
            "description": "Create a comment with Persian/Arabic text to test Unicode support"
          },
          "response": []
        },
        {
          "name": "Create Comment with Empty Text (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}",
              "host": ["{{apiBase}}"],
              "path": [""]
            },
            "description": "Attempt to create a comment with empty text (should return 400 error)"
          },
          "response": []
        },
        {
          "name": "Create Comment with Too Long Text (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"This is a very long comment that exceeds the maximum allowed length of 250 characters. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}",
              "host": ["{{apiBase}}"],
              "path": [""]
            },
            "description": "Attempt to create a comment with text longer than 250 characters (should return 400 error)"
          },
          "response": []
        },
        {
          "name": "Create Reply to Non-existent Comment (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"This is a reply to a non-existent comment\",\n  \"parentId\": \"non_existent_comment\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}",
              "host": ["{{apiBase}}"],
              "path": [""]
            },
            "description": "Attempt to create a reply to a non-existent comment (should return 404 error)"
          },
          "response": []
        },
        {
          "name": "Update Comment",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"This comment has been updated\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}/comment_123",
              "host": ["{{apiBase}}"],
              "path": ["comment_123"]
            },
            "description": "Update an existing comment's text"
          },
          "response": []
        },
        {
          "name": "Update Non-existent Comment (Should Fail)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"This comment has been updated\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}/non_existent_comment",
              "host": ["{{apiBase}}"],
              "path": ["non_existent_comment"]
            },
            "description": "Attempt to update a non-existent comment (should return 404 error)"
          },
          "response": []
        },
        {
          "name": "Update Comment with Empty Text (Should Fail)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{apiBase}}/comment_123",
              "host": ["{{apiBase}}"],
              "path": ["comment_123"]
            },
            "description": "Attempt to update a comment with empty text (should return 400 error)"
          },
          "response": []
        },
        {
          "name": "Delete Comment (Soft Delete)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{apiBase}}/comment_201",
              "host": ["{{apiBase}}"],
              "path": ["comment_201"]
            },
            "description": "Soft delete a comment (marks as deleted but doesn't remove from data)"
          },
          "response": []
        },
        {
          "name": "Delete Non-existent Comment (Should Fail)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{apiBase}}/non_existent_comment",
              "host": ["{{apiBase}}"],
              "path": ["non_existent_comment"]
            },
            "description": "Attempt to delete a non-existent comment (should return 404 error)"
          },
          "response": []
        },
        {
          "name": "Delete Already Deleted Comment (Should Fail)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{apiBase}}/comment_201",
              "host": ["{{apiBase}}"],
              "path": ["comment_201"]
            },
            "description": "Attempt to delete a comment that's already been soft-deleted (should return 400 error)"
          },
          "response": []
        },
        {
          "name": "Like Comment",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{apiBase}}/comment_123/like",
              "host": ["{{apiBase}}"],
              "path": ["comment_123", "like"]
            },
            "description": "Increment the like count for a comment"
          },
          "response": []
        },
        {
          "name": "Dislike Comment",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{apiBase}}/comment_123/dislike",
              "host": ["{{apiBase}}"],
              "path": ["comment_123", "dislike"]
            },
            "description": "Increment the dislike count for a comment"
          },
          "response": []
        },
        {
          "name": "Like Non-existent Comment (Should Fail)",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{apiBase}}/non_existent_comment/like",
              "host": ["{{apiBase}}"],
              "path": ["non_existent_comment", "like"]
            },
            "description": "Attempt to like a non-existent comment (should return 404 error)"
          },
          "response": []
        },
        {
          "name": "Dislike Non-existent Comment (Should Fail)",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{apiBase}}/non_existent_comment/dislike",
              "host": ["{{apiBase}}"],
              "path": ["non_existent_comment", "dislike"]
            },
            "description": "Attempt to dislike a non-existent comment (should return 404 error)"
          },
          "response": []
        }
      ]
    }
  ]
} 