# {{titleCase name}} Service

{{description}}

> 🏗️ **Built with Shared Core Architecture** - This microservice leverages the shared authentication, constants, and utilities from `@shared/core` for consistency and maintainability.

## 🚀 Quick Start

### Prerequisites

- Node.js 18+
- pnpm 8+
{{#if includeDatabase}}- Database (SQLite for local development, PostgreSQL for production){{/if}}

### Installation

```bash
# Install dependencies from workspace root
pnpm install

{{#if includeDatabase}}
# Set up database
pnpm db:generate
pnpm db:push
pnpm db:seed
{{/if}}

# Start development server
pnpm dev

# Or start with documentation generation
pnpm docs:dev
```

The service will be available at `http://localhost:{{defaultPort}}`

## 📁 Project Structure

```
{{dashCase name}}/
├── src/
│   ├── controllers/     # Request handlers
│   ├── services/        # Business logic
│   ├── repositories/    # Data access layer
│   ├── routes/          # API routes
│   ├── middleware/      # Custom middleware
│   ├── utils/           # Utility functions
{{#if includeDatabase}}│   └── clients/        # Database clients{{/if}}
{{#if includeDatabase}}├── prisma/             # Database schema and migrations{{/if}}
├── envs/               # Environment configurations
├── tests/              # Test files
└── server.js           # Application entry point
```

## 🛠️ Development

### Available Scripts

- `pnpm dev` - Start development server with hot reload
- `pnpm start` - Start production server
- `pnpm test` - Run all tests
- `pnpm test:watch` - Run tests in watch mode
- `pnpm test:coverage` - Run tests with coverage report
- `pnpm lint` - Lint code
- `pnpm format` - Format code with Prettier
{{#if includeDatabase}}- `pnpm db:studio` - Open Prisma Studio
- `pnpm db:seed` - Seed database with test data{{/if}}

### Environment Configuration

Copy `envs/env.example` to `envs/.env` and configure your environment variables:

```bash
cp envs/env.example envs/.env
```

Key environment variables:
- `PORT` - Server port (default: {{port}})
- `NODE_ENV` - Environment (development/production)
{{#if includeDatabase}}- `DATABASE_URL` - Database connection string{{/if}}
{{#if includeAuth}}- `JWT_SECRET` - JWT signing secret{{/if}}

## 📊 API Endpoints

### Health Check
- `GET /health` - Service health status

### {{pascalCase name}} API
- `GET /api/status` - Service status
- `GET /api/{{dashCase name}}` - Welcome message

{{#if includeAuth}}
### Authentication
Protected routes require JWT token in Authorization header:
```
Authorization: Bearer <your-jwt-token>
```
{{/if}}

## 🧪 Testing

The service includes comprehensive testing setup:

```bash
# Run all tests
pnpm test

# Run specific test suites
pnpm test:unit
pnpm test:integration
pnpm test:e2e

# Watch mode for development
pnpm test:watch
```

## 🚢 Deployment

### Docker

```bash
# Build Docker image
docker build -t {{dashCase name}}-service .

# Run container
docker run -p {{port}}:{{port}} {{dashCase name}}-service
```

### Production Deployment

1. Set environment variables
2. {{#if includeDatabase}}Run database migrations{{/if}}
3. Start the service with `pnpm start`

## 🔧 Configuration

Service configuration is managed through:
- Environment variables (`.env`)
- Service config file (`service.config.js`)
- Shared configuration from `@shared/core`

## 📈 Monitoring

- Health check endpoint: `/health`
- Request logging enabled in development
- {{#if includeDatabase}}Database query logging{{/if}}

## 🤝 Contributing

1. Follow the existing code structure
2. Add tests for new features
3. Run linting before committing
4. Update documentation as needed

## 📄 License

MIT License
