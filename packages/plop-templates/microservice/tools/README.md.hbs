# Modern API Documentation Tools

This directory contains modern, high-performance tools for automatically generating API documentation using **Fastify's native OpenAPI support** and comprehensive Postman collections.

## 🚀 Features

- ✅ **Native Performance**: Uses Fastify's built-in OpenAPI generation for optimal speed
- ✅ **Zero Configuration**: Works out-of-the-box with Fastify schema definitions
- ✅ **Comprehensive**: Generates OpenAPI specs, Postman collections, and API summaries
- ✅ **Modern Standards**: OpenAPI 3.0+ compliance with rich examples
- ✅ **Developer Experience**: Interactive Swagger UI with test capabilities
- ✅ **Automated Testing**: Generated Postman collections include test scripts

## 📁 Structure

```
tools/
├── README.md                # This documentation
├── config.js                # Configuration settings
├── docs-generator.js        # Main unified generator
├── swagger-generator.js     # OpenAPI spec generator (Fastify native)
└── postman-generator.js     # Comprehensive Postman collection generator
```

## 🔧 Available Scripts

```bash
# Generate all documentation (recommended)
npm run docs:generate

# Generate only OpenAPI specification  
npm run docs:swagger

# Generate only Postman collection
npm run docs:postman

# Auto-regenerate docs on file changes
npm run docs:watch

# Generate docs and start development server
npm run docs:dev
```

## 📖 How It Works

### 1. **OpenAPI Generation** (`swagger-generator.js`)
- Extracts OpenAPI spec directly from Fastify server instance
- Uses native `fastify.swagger()` method for maximum accuracy
- Generates enhanced documentation with examples and summaries
- Creates additional files: `api-summary.json` and `endpoints-list.json`

### 2. **Postman Collection** (`postman-generator.js`)
- Converts OpenAPI specification to comprehensive Postman collection
- Groups endpoints by tags for better organization
- Includes automatic test scripts for common validations
- Provides environment variables and example requests
- Supports complex schemas with proper examples

### 3. **Unified Generation** (`docs-generator.js`)
- Orchestrates both OpenAPI and Postman generation
- Provides comprehensive logging and error handling
- Ensures consistency between documentation formats

## 🎯 Usage

### Basic Usage
```bash
npm run docs:generate
```

### Development Workflow
```bash
# Start with fresh documentation
npm run docs:dev

# Or watch for changes during development
npm run docs:watch
```

### Generated Files
- `./docs/swagger-output.json` - OpenAPI 3.0 specification
- `./docs/comments-api.postman_collection.json` - Postman collection
- `./docs/api-summary.json` - API overview and statistics
- `./docs/endpoints-list.json` - Structured endpoint list

## 🔧 Configuration

Modify `config.js` to customize:
- Output file paths
- API information (title, description, version)
- Server configurations
- Contact and license information

## 🏆 Benefits vs Previous Approach

| Feature | Old (Hybrid) | New (Native) |
|---------|-------------|--------------|
| **Performance** | Slower (external parsing) | ⚡ Faster (native) |
| **Accuracy** | Sometimes inconsistent | ✅ Always accurate |
| **Maintenance** | Complex hybrid logic | 🎯 Simple and reliable |
| **Dependencies** | swagger-autogen + swagger-jsdoc | 📦 Zero external deps |
| **Standards** | Mixed approach | 🏅 Pure OpenAPI 3.0+ |

## 🚀 Integration

The documentation system integrates seamlessly with:
- **Fastify Server**: Native schema-to-docs conversion
- **Development Workflow**: Auto-regeneration on changes  
- **CI/CD**: Can be run in build pipelines
- **Testing**: Postman collections ready for automated testing

## 💡 Best Practices

1. **Schema-First**: Define comprehensive JSON schemas in your routes
2. **Examples**: Include example values in your schemas for better docs
3. **Descriptions**: Add meaningful descriptions to routes and parameters
4. **Tags**: Use consistent tags to organize endpoints
5. **Validation**: The generated docs reflect your actual validation rules

## 🐛 Troubleshooting

- **Generation fails**: Ensure your Fastify server can start successfully
- **Missing endpoints**: Check that routes are properly registered
- **Invalid JSON**: Verify your JSON schemas are valid
- **Import issues**: Make sure all dependencies are installed
